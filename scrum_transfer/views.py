import http
import json

from django.core.handlers.wsgi import WSGIRequest
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from loguru import logger
from rest_framework.views import APIView

from scrum_transfer.MyBitrix23 import Bitrix23
from scrum_transfer.models import Settings, Scrums, Backlog, Sprint, Epic


@csrf_exempt
def start_bitrix_cloud(request: WSGIRequest):
    """–í—å—é—à–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ë–∏—Ç—Ä–∏–∫—Å (–û–ë–õ–ê–ö–û)"""

    if request.method == 'POST':
        # –†–µ–≥–∞–µ–º —Å–µ–±–µ –¥–∞–Ω–Ω—ã–µ –ë–∏—Ç—Ä—ã
        # –ù–∏–∂–µ –¥–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ë–∏—Ç—Ä—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂—É—Ö–∏, –¥–æ—Å—Ç–∞—ë–º –∏—Ö –∏–∑ –ë–î.
        my_subdomain = Settings.objects.get(key='subdomain_cloud').value
        my_client_id = Settings.objects.get(key='client_id_cloud').value
        my_client_secret = Settings.objects.get(key='client_secret_cloud').value
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º access_token –∏ refresh_token –≤ –ë–î
        Settings.objects.update_or_create(
            key='access_token_cloud',
            defaults={
                'key': 'access_token_cloud',
                'value': request.POST.get("auth[access_token]")
            }
        )
        Settings.objects.update_or_create(
            key='refresh_token_cloud',
            defaults={
                'key': 'refresh_token_cloud',
                'value': request.POST.get("auth[refresh_token]")
            }
        )
        # –°–æ–∑–¥–∞—ë–º –∏–Ω—Å—Ç–∞–Ω—Å –∫–ª–∞—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–ª –≤ MyBitrix23.py
        bitra = Bitrix23(
            hostname=my_subdomain,
            client_id=my_client_id,
            client_secret=my_client_secret,
            access_token=request.POST.get("auth[access_token]"),
            refresh_token=request.POST.get("auth[refresh_token]"),
        )
        logger.info(f'–ù–æ–≤—ã–µ –∞–∫—Å–µ—Å –∏ —Ä–µ—Ñ—Ä–µ—à —Ç–æ–∫–µ–Ω—ã –û–ë–õ–ê–ö–û: {bitra._access_token, bitra._refresh_token}')
        return HttpResponse(f'Success', status=http.HTTPStatus.OK)
    else:
        return HttpResponse(f'–ü—Ä–æ—Å—Ç–∏, –º–æ–π –¥—Ä—É–≥, –Ω–æ {request.method} –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω.ü§∑‚Äç‚ôÇÔ∏è', status=http.HTTPStatus.OK)


@csrf_exempt
def common_bitrix_cloud(request: WSGIRequest):
    """–í—å—é—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ë–∏—Ç—Ä–∏–∫—Å–∞ (–û–ë–õ–ê–ö–û)"""
    return HttpResponse(f'üÜí–í—Å–µ –∫—Ä—É—Ç–æ, üòé–∫–ª–∞—Å—Å–Ω—ã–π {request.method} –∑–∞–ø—Ä–æ—Å!üëåüèø', status=http.HTTPStatus.OK)


@csrf_exempt
def start_bitrix_box(request: WSGIRequest):
    """–í—å—é—à–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ë–∏—Ç—Ä–∏–∫—Å (–ö–û–†–û–ë–ö–ê)"""

    if request.method == 'POST':
        # –†–µ–≥–∞–µ–º —Å–µ–±–µ –¥–∞–Ω–Ω—ã–µ –ë–∏—Ç—Ä—ã
        # –ù–∏–∂–µ –¥–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ë–∏—Ç—Ä—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂—É—Ö–∏, –¥–æ—Å—Ç–∞—ë–º –∏—Ö –∏–∑ –ë–î.
        my_subdomain = Settings.objects.get(key='subdomain_box').value
        my_client_id = Settings.objects.get(key='client_id_box').value
        my_client_secret = Settings.objects.get(key='client_secret_box').value
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º access_token –∏ refresh_token –≤ –ë–î
        Settings.objects.update_or_create(
            key='access_token_box',
            defaults={
                'key': 'access_token_box',
                'value': request.POST.get("auth[access_token]")
            }
        )
        Settings.objects.update_or_create(
            key='refresh_token_box',
            defaults={
                'key': 'refresh_token_box',
                'value': request.POST.get("auth[refresh_token]")
            }
        )
        # –°–æ–∑–¥–∞—ë–º –∏–Ω—Å—Ç–∞–Ω—Å –∫–ª–∞—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–ª –≤ MyBitrix23.py
        bitra = Bitrix23(
            hostname=my_subdomain,
            client_id=my_client_id,
            client_secret=my_client_secret,
            access_token=request.POST.get("auth[access_token]"),
            refresh_token=request.POST.get("auth[refresh_token]"),
        )
        logger.info(f'–ù–æ–≤—ã–µ –∞–∫—Å–µ—Å –∏ —Ä–µ—Ñ—Ä–µ—à —Ç–æ–∫–µ–Ω—ã –ö–û–†–û–ë–ö–ê: {bitra._access_token, bitra._refresh_token, bitra._base_url_template}')
        return HttpResponse(f'Success', status=http.HTTPStatus.OK)
    else:
        return HttpResponse(f'–ü—Ä–æ—Å—Ç–∏, –º–æ–π –¥—Ä—É–≥, –Ω–æ {request.method} –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω.ü§∑‚Äç‚ôÇÔ∏è', status=http.HTTPStatus.OK)


@csrf_exempt
def common_bitrix_box(request: WSGIRequest):
    """–í—å—é—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ë–∏—Ç—Ä–∏–∫—Å–∞ (–ö–û–†–û–ë–ö–ê)"""
    return HttpResponse(f'üÜí–í—Å–µ –∫—Ä—É—Ç–æ, üòé–∫–ª–∞—Å—Å–Ω—ã–π {request.method} –∑–∞–ø—Ä–æ—Å!üëåüèø', status=http.HTTPStatus.OK)


class BacklogTransfer(APIView):
    """
    –í—å—é—à–∫–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –±—ç–∫–ª–æ–≥–æ–≤ –¥–ª—è —Å–∫—Ä–∞–º–æ–≤.
    """
    def get(self, request,format=None):
        # –°–æ–∑–¥–∞—ë–º –∏–Ω—Å—Ç–∞–Ω—Å –±–∏—Ç—Ä—ã –û–ë–õ–ê–ö–û
        bitra_cloud = Bitrix23(
            hostname=Settings.objects.get(key="subdomain_cloud").value,
            client_id=Settings.objects.get(key="client_id_cloud").value,
            client_secret=Settings.objects.get(key="client_secret_cloud").value,
            access_token=Settings.objects.get(key="access_token_cloud").value,
            refresh_token=Settings.objects.get(key="refresh_token_cloud").value,
        )
        # bitra_cloud.refresh_tokens()

        # –°–æ–∑–¥–∞—ë–º –∏–Ω—Å—Ç–∞–Ω—Å –±–∏—Ç—Ä—ã –ö–û–†–û–ë–ö–ê
        bitra_box = Bitrix23(
            hostname=Settings.objects.get(key="subdomain_box").value,
            client_id=Settings.objects.get(key="client_id_box").value,
            client_secret=Settings.objects.get(key="client_secret_box").value,
            access_token=Settings.objects.get(key="access_token_box").value,
            refresh_token=Settings.objects.get(key="refresh_token_box").value,
        )
        # bitra_box.refresh_tokens()

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Å–∫—Ä–∞–º–æ–≤ –∏–∑ –ë–î
        scrum_objects = Scrums.objects.all()

        for i_numb, i_scrum in enumerate(scrum_objects):   # –ë–µ—Ä—ë–º –∫–∞–∂–¥—ã–π —Å–∫—Ä–∞–º
            logger.info(f'–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä–∞–º ‚Ññ {i_numb + 1}')

            # –ø–æ–ª—É—á–∞–µ–º –±—ç–∫–ª–æ–≥ —Å–∫—Ä–∞–º–∞ –∏–∑ –æ–±–ª–∞–∫–∞
            logger.info(f'–ó–∞–ø—Ä–æ—Å –±—ç–∫–ª–æ–≥–∞ –∏–∑ –æ–±–ª–∞–∫–∞ –¥–ª—è —Å–∫—Ä–∞–º–∞: {i_scrum.scrum_title}')
            method = 'tasks.api.scrum.backlog.get'
            params = {
                'id': i_scrum.scrum_cloud_id,
            }
            i_backlog_cloud = bitra_cloud.call(method=method, params=params)
            if not i_backlog_cloud.get('result'):   # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ù–ï –±—ã–ª —É—Å–ø–µ—à–Ω—ã–º
                logger.warning(f'–ù–ï –£–î–ê–õ–°–Ø –∑–∞–ø—Ä–æ—Å –±—ç–∫–ª–æ–≥–∞ –∏–∑ –û–ë–õ–ê–ö–ê –¥–ª—è —Å–∫—Ä–∞–º–∞: {i_scrum.scrum_title}.\n\n'
                               f'–û—Ç–≤–µ—Ç –±–∏—Ç—Ä–∏–∫—Å–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –º–µ—Ç–æ–¥–æ–º {method} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {params}:\n{i_backlog_cloud}')
                continue

            # –°–æ–∑–¥–∞—ë–º –±—ç–∫–ª–æ–≥ –≤ –∫–æ—Ä–æ–±–∫–µ
            logger.info(f'–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–ª–æ–≥–∞ –≤ –∫–æ—Ä–æ–±–∫–µ –¥–ª—è —Å–∫—Ä–∞–º–∞: {i_scrum.scrum_title}')
            method = 'tasks.api.scrum.backlog.add'
            params = {
                'fields': {
                    'groupId': i_scrum.scrum_box_id,    # ID —Å–∫—Ä–∞–º–∞
                    'createdBy': Settings.objects.get(key='worker_in_box_id').value,  # ID —Å–æ–∑–¥–∞—Ç–µ–ª—è
                },
            }
            i_backlog_box = bitra_box.call(method=method, params=params)
            if not i_backlog_box.get('result'):   # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ù–ï –±—ã–ª —É—Å–ø–µ—à–Ω—ã–º
                logger.warning(f'–ù–ï –£–î–ê–õ–°–Ø –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–ª–æ–≥–∞ –≤ –ö–û–†–û–ë–ö–ï –¥–ª—è —Å–∫—Ä–∞–º–∞: {i_scrum.scrum_title}.\n\n'
                               f'–û—Ç–≤–µ—Ç –±–∏—Ç—Ä–∏–∫—Å–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –º–µ—Ç–æ–¥–æ–º {method} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {params}:\n{i_backlog_box}')

                if i_backlog_box.get('error_description') == 'Backlog already added':   # –µ—Å–ª–∏ –±—ç–∫–ª–æ–≥ —É–∂–µ –µ—Å—Ç—å
                    logger.info(f'–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –±—ç–∫–ª–æ–≥–∞ –∏–∑ –ö–û–†–û–ë–ö–ò –¥–ª—è —Å–∫—Ä–∞–º–∞: {i_scrum.scrum_title}')
                    # –ü–æ–ª—É—á–∞–µ–º –±—ç–∫–ª–æ–≥ —Å–∫—Ä–∞–º–∞
                    method = 'tasks.api.scrum.backlog.get'
                    params = {
                        'id': i_scrum.scrum_box_id,
                    }
                    get_i_backlog_from_box = bitra_box.call(method=method, params=params)
                    if get_i_backlog_from_box.get('result'):
                        i_backlog_box = get_i_backlog_from_box
                    else:
                        logger.warning(
                            f'–ù–ï –£–î–ê–õ–°–Ø –∑–∞–ø—Ä–æ—Å –¥–ª—è –ü–û–õ–£–ß–ï–ù–ò–Ø –±—ç–∫–ª–æ–≥–∞ –≤ –ö–û–†–û–ë–ö–ï –¥–ª—è —Å–∫—Ä–∞–º–∞: {i_scrum.scrum_title}.\n\n'
                            f'–û—Ç–≤–µ—Ç –±–∏—Ç—Ä–∏–∫—Å–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –º–µ—Ç–æ–¥–æ–º {method} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {params}:\n{i_backlog_box}\n'
                            f'\t\t\t–ù—É —á—Ç–æ–∂–µ...—Ç–æ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏ –∏–¥—ë–º –¥–∞–ª—å—à–µ –ø–æ —Å–ø–∏—Å–∫—É.')
                        continue
                else:
                    continue

            # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –æ –±—ç–∫–ª–æ–≥–µ –≤ –ë–î –ø—Ä–æ–µ–∫—Ç–∞
            backlog_wrt_rslt = Backlog.objects.update_or_create(
                backlog_id_cloud=i_backlog_cloud.get('result').get('id'),
                defaults={
                    'backlog_id_cloud': i_backlog_cloud.get('result').get('id'),
                    'backlog_id_box': i_backlog_box.get('result').get('id'),
                    'scrum_cloud_id': i_scrum.scrum_cloud_id,
                    'scrum_box_id': i_scrum.scrum_box_id,
                }
            )
            logger.success(f'–ë—ç–∫–ª–æ–≥ —Å–∫—Ä–∞–º–∞: {i_scrum.scrum_title} {"—Å–æ–∑–¥–∞–Ω" if backlog_wrt_rslt[1] else "–æ–±–Ω–æ–≤–ª—ë–Ω"}')
        return HttpResponse(f'–ó–∞–ø—Ä–æ—Å –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω. –í –∞–¥–º–∏–Ω–∫–µ –∑–∞–ø–∏—Å–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ –ë—ç–∫–ª–æ–≥–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–º '
                            f'–±—ç–∫–ª–æ–≥–∞–º –≤ –∫–æ—Ä–æ–±–∫–µ', status=http.HTTPStatus.OK)


class SprintTransfer(APIView):
    """
    –í—å—é—à–∫–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –∏–∑ –æ–±–ª–∞–∫–∞ –≤ –∫–æ—Ä–æ–±–∫—É –±–∏—Ç—Ä–∏–∫—Å–∞ —Å–ø—Ä–∏–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∫—Ä–∞–º–∞.
    """
    def get(self, request, format=None):
        # –°–æ–∑–¥–∞—ë–º –∏–Ω—Å—Ç–∞–Ω—Å –±–∏—Ç—Ä—ã –û–ë–õ–ê–ö–û
        bitra_cloud = Bitrix23(
            hostname=Settings.objects.get(key="subdomain_cloud").value,
            client_id=Settings.objects.get(key="client_id_cloud").value,
            client_secret=Settings.objects.get(key="client_secret_cloud").value,
            access_token=Settings.objects.get(key="access_token_cloud").value,
            refresh_token=Settings.objects.get(key="refresh_token_cloud").value,
        )
        # bitra_cloud.refresh_tokens()

        # –°–æ–∑–¥–∞—ë–º –∏–Ω—Å—Ç–∞–Ω—Å –±–∏—Ç—Ä—ã –ö–û–†–û–ë–ö–ê
        bitra_box = Bitrix23(
            hostname=Settings.objects.get(key="subdomain_box").value,
            client_id=Settings.objects.get(key="client_id_box").value,
            client_secret=Settings.objects.get(key="client_secret_box").value,
            access_token=Settings.objects.get(key="access_token_box").value,
            refresh_token=Settings.objects.get(key="refresh_token_box").value,
        )
        # bitra_box.refresh_tokens()

        scrum_objects = Scrums.objects.all()
        for i_numb, i_scrum in enumerate(scrum_objects):   # –∏—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ —Å–∫—Ä–∞–º–∞–º
            logger.info(f'–°–∫—Ä–∞–º ‚Ññ {i_numb + 1}')
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø—Ä–∏–Ω—Ç–æ–≤ –∏–∑ –æ–±–ª–∞–∫–∞
            logger.info(f'–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø—Ä–∏–Ω—Ç–æ–≤ –∏–∑ –æ–±–ª–∞–∫–∞ –¥–ª—è —Å–∫—Ä–∞–º–∞: {i_scrum.scrum_title}')
            method = 'tasks.api.scrum.sprint.list'
            params = {
                'filter': {
                    'GROUP_ID': i_scrum.scrum_cloud_id,
                },
            }
            sprints_lst = bitra_cloud.call(method=method, params=params)
            if not sprints_lst.get('result'):     # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–ø—Ä–∏–Ω—Ç–æ–≤ –Ω–µ –ø–æ–ª—É—á–µ–Ω
                logger.warning(f'–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –û–ë–õ–ê–ö–ê —Å–ø—Ä–∏–Ω—Ç–æ–≤ –¥–ª—è —Å–∫—Ä–∞–º–∞ {i_scrum.scrum_title} –ù–ï –£–î–ê–õ–°–Ø.\n\n'
                               f'–ó–∞–ø—Ä–æ—Å {method} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {params}, –æ—Ç–≤–µ—Ç:\n{sprints_lst}')
                continue
            sprints_lst = sprints_lst.get('result')

            for j_numb, j_sprint in enumerate(sprints_lst):    # –∏—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ —Å–ø–∏—Å–∫—É —Å–ø—Ä–∏–Ω—Ç–æ–≤
                logger.info(f'–°–ø—Ä–∏–Ω—Ç ‚Ññ {j_numb + 1}')

                # –°–æ–∑–¥–∞—ë–º —Å–ø—Ä–∏–Ω—Ç –≤ –∫–æ—Ä–æ–±–∫–µ
                logger.info(f'–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø—Ä–∏–Ω—Ç–∞ –≤ –ö–û–†–û–ë–ö–ï –¥–ª—è —Å–∫—Ä–∞–º–∞ {i_scrum.scrum_title}')
                method = 'tasks.api.scrum.sprint.add'
                params = {
                    'fields': {
                        'groupId': i_scrum.scrum_box_id,
                        'name': j_sprint.get('name'),
                        'dateStart': j_sprint.get('dateStart'),
                        'dateEnd': j_sprint.get('dateEnd'),
                        'status': j_sprint.get('status'),
                        'createdBy': Settings.objects.get(key='worker_in_box_id').value,
                        'sort': j_sprint.get('sort'),
                    },
                }
                create_sprint = bitra_box.call(method=method, params=params)
                if not create_sprint.get('result'):
                    logger.warning(f'–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø—Ä–∏–Ω—Ç–∞ –≤ —Å–∫—Ä–∞–º–µ {i_scrum.scrum_title} –ù–ï –£–î–ê–õ–°–Ø.\n\n'
                                   f'–ó–∞–ø—Ä–æ—Å: {method}|{params}\n–û—Ç–≤–µ—Ç: {create_sprint}')
                    continue

                sprint_obj = Sprint.objects.update_or_create(
                    sprint_id_cloud=j_sprint.get('id'),
                    defaults={
                        'sprint_id_cloud': j_sprint.get('id'),
                        'sprint_id_box': create_sprint.get('result').get('id'),
                        'scrum_cloud_id': i_scrum.scrum_cloud_id,
                        'scrum_box_id': i_scrum.scrum_box_id,
                        'sprint_name': j_sprint.get('name'),
                    }
                )
                logger.success(f'–°–ø—Ä–∏–Ω—Ç {j_sprint.get("name")} –¥–ª—è —Å–∫—Ä–∞–º–∞ {i_scrum.scrum_title} '
                               f'{"—Å–æ–∑–¥–∞–Ω" if sprint_obj[1] else "–æ–±–Ω–æ–≤–ª—ë–Ω"} –≤ –ë–î.')
        return HttpResponse('–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω. –ó–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –≤ –∫–æ—Ä–æ–±–∫–µ —Å–ø—Ä–∏–Ω—Ç—ã '
                            '—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å–ø–∏—Å–∫—É –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –°–ø—Ä–∏–Ω—Ç—ã –≤ –∞–¥–º–∏–Ω–∫–µ', status=http.HTTPStatus.OK)


class EpicTransfer(APIView):
    """
    –í—å—é—à–∫–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –∏–∑ –æ–±–ª–∞–∫–∞ –≤ –∫–æ—Ä–æ–±–∫—É —ç–ø–∏–∫–æ–≤ –¥–ª—è —Å–∫—Ä–∞–º–æ–≤.
    """
    def get(self, request, format=None):
        logger.info('================–ù–ê–ß–ò–ù–ê–ï–ú –¢–†–ê–ù–°–§–ï–† –≠–ü–ò–ö–û–í! –≠—Ç–æ –±—É–¥–µ—Ç —ç–ø–∏—á–Ω–æ...================')

        # –°–æ–∑–¥–∞—ë–º –∏–Ω—Å—Ç–∞–Ω—Å –±–∏—Ç—Ä—ã –û–ë–õ–ê–ö–û
        bitra_cloud = Bitrix23(
            hostname=Settings.objects.get(key="subdomain_cloud").value,
            client_id=Settings.objects.get(key="client_id_cloud").value,
            client_secret=Settings.objects.get(key="client_secret_cloud").value,
            access_token=Settings.objects.get(key="access_token_cloud").value,
            refresh_token=Settings.objects.get(key="refresh_token_cloud").value,
        )
        # bitra_cloud.refresh_tokens()
        # –°–æ–∑–¥–∞—ë–º –∏–Ω—Å—Ç–∞–Ω—Å –±–∏—Ç—Ä—ã –ö–û–†–û–ë–ö–ê
        bitra_box = Bitrix23(
            hostname=Settings.objects.get(key="subdomain_box").value,
            client_id=Settings.objects.get(key="client_id_box").value,
            client_secret=Settings.objects.get(key="client_secret_box").value,
            access_token=Settings.objects.get(key="access_token_box").value,
            refresh_token=Settings.objects.get(key="refresh_token_box").value,
        )
        # bitra_box.refresh_tokens()

        scrums = Scrums.objects.all()
        for i_numb, i_scrum in enumerate(scrums):
            logger.info(f'–°–∫—Ä–∞–º ‚Ññ {i_numb + 1} | {i_scrum.scrum_title}')

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–ø–∏–∫–æ–≤ –∏–∑ –æ–±–ª–∞–∫–∞
            logger.info(f'–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–ø–∏–∫–æ–≤ –∏–∑ –æ–±–ª–∞–∫–∞.')
            method = 'tasks.api.scrum.epic.list'
            params = {
                'filter': {
                    'GROUP_ID': i_scrum.scrum_cloud_id,
                },
            }
            epics_lst = bitra_cloud.call(method=method, params=params)
            if not epics_lst.get('result'):
                logger.warning(f'–ù–µ—É–¥–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —ç–ø–∏–∫–æ–≤! '
                               f'–í–æ–∑–º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ, —á—Ç–æ —Å–ø–∏—Å–æ–∫ —ç–ø–∏–∫–æ–≤ –ø—É—Å—Ç.\n\n'
                               f'–ó–∞–ø—Ä–æ—Å: {method}|{params}\n–û—Ç–≤–µ—Ç:{epics_lst}')
                continue

            for j_numb, j_epic in enumerate(epics_lst.get('result')):
                logger.info(f'\t\t–≠–ø–∏–∫ ‚Ññ {j_numb + 1} | –°–∫—Ä–∞–º: {i_scrum.scrum_title}')

                # –°–æ–∑–¥–∞—ë–º —ç–ø–∏–∫ –≤ –∫–æ—Ä–æ–±–∫–µ
                logger.info(f'\t\t–°–æ–∑–¥–∞—ë–º —ç–ø–∏–∫ –≤ –∫–æ—Ä–æ–±–∫–µ')
                method = 'tasks.api.scrum.epic.add'
                params = {
                    'fields': {
                        'groupId': i_scrum.scrum_box_id,
                        'name': j_epic.get('name'),
                        'description': j_epic.get('description'),
                        'createdBy': Settings.objects.get(key='worker_in_box_id').value,
                        'color': j_epic.get('color'),
                    },
                }
                create_epic_in_box = bitra_box.call(method=method, params=params)
                if not create_epic_in_box.get('result'):
                    logger.warning(f'\t\t–ù–µ—É–¥–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ø–∏–∫–∞ –≤ –∫–æ—Ä–æ–±–∫–µ.\n\n'
                                   f'\t\t–ó–∞–ø—Ä–æ—Å: {method}|{params}\n\t\t–û—Ç–≤–µ—Ç: {create_epic_in_box}')
                    continue

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± —ç–ø–∏–∫–µ –≤ –ë–î
                Epic.objects.update_or_create(
                    epic_id_cloud=j_epic.get('id'),
                    defaults={
                        'epic_id_cloud': j_epic.get('id'),
                        'epic_id_box': create_epic_in_box.get('result').get('id'),
                        'scrum_cloud_id': i_scrum.scrum_cloud_id,
                        'scrum_box_id': i_scrum.scrum_box_id,
                        'epic_name': j_epic.get('name'),
                        'epic_files': j_epic.get('files'),
                    }
                )
                logger.success(f'\t\t–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —ç–ø–∏–∫: {j_epic.get("name")}|–°–∫—Ä–∞–º: {i_scrum.scrum_title}')
        return HttpResponse('–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω. –ó–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –≤ –∫–æ—Ä–æ–±–∫–µ —ç–ø–∏–∫–∏ '
                            '—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å–ø–∏—Å–∫—É –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ –≠–ø–∏–∫–∏ –≤ –∞–¥–º–∏–Ω–∫–µ', status=http.HTTPStatus.OK)


class ScrumTransferView(APIView):
    """
    –ü–µ—Ä–µ–Ω–æ—Å —Å–∫—Ä–∞–º–æ–≤ –∏–∑ –æ–±–ª–∞–∫–∞ –≤ –∫–æ—Ä–æ–±–∫—É –ë–∏—Ç—Ä–∏–∫—Å.
    –ó–¥–µ—Å—å –∫–æ–º–ø–ª–µ–∫—Å –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —ç—Ç–æ–π —Ü–µ–ª–∏.
    –ü–æ –∏—Ç–æ–≥—É –≤ –∫–æ—Ä–æ–±–∫–µ –±–∏—Ç—Ä—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è —Å–∫—Ä–∞–º—ã –∏ —Ä–∞—Å—Å—ã–ª–∞—é—Ç—Å—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.
    """
    # TODO: –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Bitrix

    def get(self, request, format=None):
        # –°–æ–∑–¥–∞—ë–º –∏–Ω—Å—Ç–∞–Ω—Å –±–∏—Ç—Ä—ã –û–ë–õ–ê–ö–û
        bitra_cloud = Bitrix23(
            hostname=Settings.objects.get(key="subdomain_cloud").value,
            client_id=Settings.objects.get(key="client_id_cloud").value,
            client_secret=Settings.objects.get(key="client_secret_cloud").value,
            access_token=Settings.objects.get(key="access_token_cloud").value,
            refresh_token=Settings.objects.get(key="refresh_token_cloud").value,
        )
        # bitra_cloud.refresh_tokens()

        # –°–æ–∑–¥–∞—ë–º –∏–Ω—Å—Ç–∞–Ω—Å –±–∏—Ç—Ä—ã –ö–û–†–û–ë–ö–ê
        bitra_box = Bitrix23(
            hostname=Settings.objects.get(key="subdomain_box").value,
            client_id=Settings.objects.get(key="client_id_box").value,
            client_secret=Settings.objects.get(key="client_secret_box").value,
            access_token=Settings.objects.get(key="access_token_box").value,
            refresh_token=Settings.objects.get(key="refresh_token_box").value,
        )
        # bitra_box.refresh_tokens()

        '''–ó–∞–±–∏—Ä–∞–µ–º —Å–∫—Ä–∞–º—ã –∏–∑ –æ–±–ª–∞–∫–∞ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤ –∫–æ—Ä–æ–±–∫—É, —Ä–∞–∑–æ—Å–ª–∞–≤ –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —é–∑–µ—Ä–∞–º –≤ –∫–æ—Ä–æ–±–∫–µ'''
        # ID sonet_group –∏–∑ –æ–±–ª–∞–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è —Å–∫—Ä–∞–º–∞–º–∏
        scrum_id_tpl = ('94', '102', '110', '82', '70', '62', '80', '86', '42', '60', '58',
                        '84', '64', '90', '72', '106', '52', '46', '78')
        # –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∞–º—ã –∏–∑ –æ–±–ª–∞–∫–∞
        method = 'sonet_group.get'
        params = {}
        method_rslt = bitra_cloud.call(method=method, params=params)
        counter = 0
        for i_sonet_group in method_rslt.get('result'):
            if i_sonet_group.get('ID') in scrum_id_tpl:
                counter += 1
                logger.info(f'–°–∫—Ä–∞–º ‚Ññ {counter}')

                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã (—Å–∫—Ä–∞–º–∞) –∏–∑ –æ–±–ª–∞–∫–∞
                logger.info(f'–ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã (—Å–∫—Ä–∞–º–∞) –∏–∑ –æ–±–ª–∞–∫–∞')
                method = 'sonet_group.user.get'
                params = {
                    'ID': i_sonet_group.get('ID')  # ID –≥—Ä—É–ø–ø—ã (—Å–∫—Ä–∞–º–∞)
                }
                method_rslt = bitra_cloud.call(method=method, params=params)
                i_scrum_users_lst = method_rslt.get('result')
                i_scrum_users_id_lst = [i_scrum_user.get('USER_ID') for i_scrum_user in i_scrum_users_lst]
                i_scrum_master_id = '28834' if '28834' in i_scrum_users_id_lst else '27662'

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö —Å–∫—Ä–∞–º–∞ –∏–∑ –æ–±–ª–∞–∫–∞ –∏ –Ω–∞—Ö–æ–¥–∏–º –∏—Ö –ø–æ –º—ç–π–ª—É –≤ –∫–æ—Ä–æ–±–∫–µ
                logger.info(f'–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö —Å–∫—Ä–∞–º–∞ –∏–∑ –æ–±–ª–∞–∫–∞ –∏ –Ω–∞—Ö–æ–¥–∏–º –∏—Ö –ø–æ –º—ç–π–ª—É –≤ –∫–æ—Ä–æ–±–∫–µ (—Ü–∏–∫–ª)')
                for j_user_dct in i_scrum_users_lst:
                    logger.info(f"–Æ–∑–µ—Ä c ID –≤ –æ–±–ª–∞–∫–µ {j_user_dct.get('USER_ID')}")
                    logger.info('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑. –≤ –æ–±–ª–∞–∫–µ')
                    method = 'user.get'
                    params = {
                        'ID': j_user_dct.get('USER_ID'),    # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∏—Ç—Ä–µ
                    }
                    method_rslt = bitra_cloud.call(method=method, params=params)    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑. –≤ –æ–±–ª–∞–∫–µ
                    logger.info('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑. –≤ –∫–æ—Ä–æ–±–∫–µ')
                    method = 'user.get'
                    params = {
                        'EMAIL': method_rslt.get('result')[0].get('EMAIL')
                    }
                    method_rslt = bitra_box.call(method=method, params=params)    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑. –≤ –∫–æ—Ä–æ–±–∫–µ
                    j_user_dct['BOX_ID'] = method_rslt.get('result')[0].get('ID')   # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —é–∑–µ—Ä–∞ –∫–æ—Ä–æ–±–∫–∏
                    if j_user_dct.get('USER_ID') == i_scrum_master_id:   # –ï—Å–ª–∏ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π ID - —Å–∫—Ä–∞–º –º–∞—Å—Ç–µ—Ä
                        logger.info(f"–ù–∞–π–¥–µ–Ω —Å–∫—Ä–∞–º-–º–∞—Å—Ç–µ—Ä (ID –æ–±–ª–∞–∫–∞ {j_user_dct.get('USER_ID')}, "
                                    f"ID –∫–æ—Ä–æ–±–∫–∏ {j_user_dct['BOX_ID']})")
                        i_scrum_master_box_id = method_rslt.get('result')[0].get('ID')
                        # –°–æ–∑–¥–∞—ë–º —Å–∫—Ä–∞–º –≤ –∫–æ—Ä–æ–±–∫–µ, –∫–æ–≥–¥–∞ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π —é–∑–µ—Ä —Å–∫—Ä–∞–º-–º–∞—Å—Ç–µ—Ä–∞
                        logger.info(f"–°–æ–∑–¥–∞—ë–º —Å–∫—Ä–∞–º –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º {i_sonet_group.get('NAME')} –≤ –∫–æ—Ä–æ–±–∫–µ")
                        method = 'sonet_group.create'
                        params = {
                            'NAME': i_sonet_group.get('NAME'),
                            'DESCRIPTION': i_sonet_group.get('DESCRIPTION'),
                            'ACTIVE': i_sonet_group.get('ACTIVE'),
                            'VISIBLE': i_sonet_group.get('VISIBLE'),
                            'OPENED': i_sonet_group.get('OPENED'),
                            'CLOSED': i_sonet_group.get('CLOSED'),
                            'SUBJECT_ID': i_sonet_group.get('SUBJECT_ID'),
                            'KEYWORDS': i_sonet_group.get('KEYWORDS'),
                            'SUBJECT_NAME': i_sonet_group.get('SUBJECT_NAME'),
                            'PROJECT': i_sonet_group.get('PROJECT'),
                            'IS_EXTRANET': i_sonet_group.get('IS_EXTRANET'),
                            'INITIATE_PERMS': 'E',  # –í–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ –º–æ–¥–µ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –≤ —Å–∫—Ä–∞–º
                            'SPAM_PERMS': 'K',  # –í—Å–µ —á–ª–µ–Ω—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–æ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–∫—Ä–∞–º
                            'SCRUM_MASTER_ID': i_scrum_master_box_id,   # ID —Å–∫—Ä–∞–º-–º–∞—Å—Ç–µ—Ä–∞
                        }
                        method_rslt = bitra_box.call(method=method, params=params)
                        scrum_box_id = method_rslt.get('result')

                # –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤ —Å–∫—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø—Ä–∞–≤–∞ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—å, –ø–æ—Å–ª–µ –∏—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è)
                logger.info(f"–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤ —Å–∫—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø—Ä–∞–≤–∞ –≤ —Å–∫—Ä–∞–º–µ –Ω–µ –ø—Ä–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è).")
                method = 'sonet_group.user.invite'
                params = {
                    'GROUP_ID': scrum_box_id,
                    'USER_ID': list(map(lambda user_dct: user_dct.get('BOX_ID'), i_scrum_users_lst)),
                    'ROLE': f'–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –í–∞—Å –≤ –ø—Ä–æ–µ–∫—Ç: {i_sonet_group.get("NAME")}'
                }
                method_rslt = bitra_box.call(method=method, params=params)
        return HttpResponse(f'{json.dumps(method_rslt, indent=4, ensure_ascii=False)}', status=http.HTTPStatus.OK)


# TODO: –∑–∞–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª –±–ª–æ–∫ –Ω–∏–∂–µ, –Ω–æ –æ—Å—Ç–∞–≤–ª—è—é –µ–≥–æ —Ç—É—Ç, –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ —é–∑–µ—Ä–æ–≤ –≤ —Å–∫—Ä–∞–º–µ
#                 # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä–∞–º –∫–æ—Ä–æ–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –∏—Ö –ø—Ä–∞–≤–∞–º–∏
#                 scrum_moders_and_owner_lst = list(filter(lambda user_dct: user_dct.get('ROLE') == 'E' or user_dct.get('ROLE') == 'A', i_scrum_users_lst))
#                 scrum_other_users_lst = list(filter(lambda user_dct: user_dct.get('ROLE') == 'K', i_scrum_users_lst))
#                 # –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤ —Å–∫—Ä–∞–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
#                 method = 'sonet_group.user.invite'
#                 params = {
#                     'GROUP_ID': scrum_box_id,
#                     'USER_ID': list(map(lambda user_dct: user_dct.get('BOX_ID'), scrum_moders_and_owner_lst)),
#                     'ROLE': 'E'
#                 }
#                 method_rslt = bitra_box.call(method=method, params=params)
#                 # –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤ —Å–∫—Ä–∞–º –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#                 method = 'sonet_group.user.invite'
#                 params = {
#                     'GROUP_ID': scrum_box_id,
#                     'USER_ID': list(map(lambda user_dct: user_dct.get('BOX_ID'), scrum_other_users_lst)),
#                     'ROLE': 'K'
#                 }
#                 method_rslt = bitra_box.call(method=method, params=params)
#         return HttpResponse(f'{json.dumps(method_rslt, indent=4, ensure_ascii=False)}', status=http.HTTPStatus.OK)


class TestBitrixActions(APIView):
    """
    –¢–µ—Å—Ç –∫–∞–∫–∏—Ö-–ª–∏–±–æ –¥–µ–π—Å—Ç–≤–∏–π —Å –ê–ü–ò –ë–∏—Ç—Ä–∏–∫—Å–∞.
    –ó–¥–µ—Å—å –∫–æ–º–ø–ª–µ–∫—Å –º–µ—Ç–æ–¥–æ–≤ —Å –æ–±–ª–∞–∫–æ–º –∏ –∫–æ—Ä–æ–±–∫–æ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –æ–¥–Ω–æ–π —Ü–µ–ª—å—é.
    """


class TestBtrxMethod(APIView):
    """–¢–µ—Å—Ç –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –º–µ—Ç–æ–¥–∞ –±–∏—Ç—Ä–∏–∫—Å–∞"""

    def get(self, request, format=None):
        """–í—å—é—à–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –º–µ—Ç–æ–¥–∞ –ê–ü–ò –ë–∏—Ç—Ä–∏–∫—Å–∞"""

        # –°–æ–∑–¥–∞—ë–º –∏–Ω—Å—Ç–∞–Ω—Å –±–∏—Ç—Ä—ã –û–ë–õ–ê–ö–û
        bitra_cloud = Bitrix23(
            hostname=Settings.objects.get(key="subdomain_cloud").value,
            client_id=Settings.objects.get(key="client_id_cloud").value,
            client_secret=Settings.objects.get(key="client_secret_cloud").value,
            access_token=Settings.objects.get(key="access_token_cloud").value,
            refresh_token=Settings.objects.get(key="refresh_token_cloud").value,
        )
        # bitra_cloud.refresh_tokens()

        # –°–æ–∑–¥–∞—ë–º –∏–Ω—Å—Ç–∞–Ω—Å –±–∏—Ç—Ä—ã –ö–û–†–û–ë–ö–ê
        bitra_box = Bitrix23(
            hostname=Settings.objects.get(key="subdomain_box").value,
            client_id=Settings.objects.get(key="client_id_box").value,
            client_secret=Settings.objects.get(key="client_secret_box").value,
            access_token=Settings.objects.get(key="access_token_box").value,
            refresh_token=Settings.objects.get(key="refresh_token_box").value,
        )
        # bitra_box.refresh_tokens()

        # # –ó–∞–ø–∏—Å—ã–≤–∞—é –≤ —Å–¥–µ–ª–∫—É ID –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
        # method = 'crm.deal.update'
        # params = {
        #     'id': 86920,  # –£—Å—Ç–∞–Ω–æ–≤–∏–ª —è–≤–Ω–æ, ID —Å–¥–µ–ª–∫–∏
        #     'fields': {
        #         'UF_CRM_1675152964610': [13268, 13274]  # –£—Å—Ç–∞–Ω–æ–≤–∏–ª —è–≤–Ω–æ, ID –º–∞—Ä–∫–µ—Ç–ø–ª–µ—Å–∞(–æ–≤)
        #     },
        # }

        # # –°–æ–∑–¥–∞—ë–º —Å–∫—Ä–∞–º
        # method = 'sonet_group.create'
        # params = {
        #     'NAME': '–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∞–º',
        #     'DESCRIPTION': '–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∞–º (–æ–ø–∏—Å–∞–Ω–∏–µ)',
        #     'ACTIVE': 'Y',
        #     'VISIBLE': 'Y',
        #     'OPENED': 'Y',
        #     'CLOSED': 'N',
        #     'PROJECT': 'Y',
        #     'INITIATE_PERMS': 'E',  # –í–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ –º–æ–¥–µ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –≤ —Å–∫—Ä–∞–º
        #     'SPAM_PERMS': 'K',  # –í—Å–µ —á–ª–µ–Ω—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–æ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–∫—Ä–∞–º
        #     'SCRUM_MASTER_ID': 105,  # ID —Å–∫—Ä–∞–º-–º–∞—Å—Ç–µ—Ä–∞
        # }

        # # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã (—Å–∫—Ä–∞–º—ã —Ç–æ–∂–µ —Å—Ä–µ–¥–∏ –Ω–∏—Ö)
        # method = 'sonet_group.get'
        # params = {}

        # # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã (—Å–∫—Ä–∞–º–∞)
        # method = 'sonet_group.user.get'
        # params = {
        #     'ID': 102   # ID –≥—Ä—É–ø–ø—ã (—Å–∫—Ä–∞–º–∞)
        # }

        # # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        # method = 'user.get'
        # params = {
        #     # 'ID': 105,    # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∏—Ç—Ä–µ
        #     # 'EMAIL': 'd.shestakov@cfunalog.ru'
        # }

        # # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –¥–ª—è ...
        # method = 'tasks.task.getFields'
        # params = {}

        # # –ü–æ–ª—É—á–∞–µ–º –±—ç–∫–ª–æ–≥ —Å–∫—Ä–∞–º–∞
        # method = 'tasks.api.scrum.backlog.get'
        # params = {
        #     'id': 28,
        # }

        # # –°–æ–∑–¥–∞—ë–º –±—ç–∫–ª–æ–≥ —Å–∫—Ä–∞–º–∞
        # method = 'tasks.api.scrum.backlog.add'
        # params = {
        #     'fields': {
        #         'groupId': 11,    # ID —Å–∫—Ä–∞–º–∞
        #         'createdBy': 105,   # ID —Å–æ–∑–¥–∞—Ç–µ–ª—è
        #     },
        # }

        # # –£–¥–∞–ª—è–µ–º –±—ç–∫–ª–æ–≥
        # method = 'tasks.api.scrum.backlog.delete'
        # params = {
        #     'id': 21,   # ID –±—ç–∫–ª–æ–≥–∞
        # }

        # # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø—Ä–∏–Ω—Ç–æ–≤
        # method = 'tasks.api.scrum.sprint.list'
        # params = {
        #     'filter': {
        #         'GROUP_ID': 28,
        #     },
        # }

        # # –ü–æ–ª—É—á–∞–µ–º —Å–ø—Ä–∏–Ω—Ç –ø–æ ID
        # method = 'tasks.api.scrum.sprint.get'
        # params = {
        #     'id': 478,
        # }

        # # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–¥–∏–∏ –∫–∞–Ω–±–∞–Ω–∞ –¥–ª—è —Å–ø—Ä–∏–Ω—Ç–∞ —Å ID ...
        # method = 'tasks.api.scrum.kanban.getStages'
        # params = {
        #     'sprintId': 37,
        # }

        # # –°–æ–∑–¥–∞—ë–º —Å—Ç–∞–¥–∏—é –∫–∞–Ω–±–∞–Ω–∞ –≤ —Å–ø—Ä–∏–Ω—Ç–µ
        # method = 'tasks.api.scrum.kanban.addStage'
        # params = {
        #     'fields': {
        #         'sprintId': 37,
        #         'name': 'TEST KABAN STAGE',
        #         # sort: sort,
        #         'type': 'NEW',  # NEW, WORK, FINISH
        #         # color: color,
        #     },
        # }

        # # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å—Ç–∞–¥–∏—é –∫–∞–Ω–±–∞–Ω–∞
        # method = 'tasks.api.scrum.kanban.addTask'
        # params = {
        #     'sprintId': 37,
        #     'taskId': 118,
        #     'stageId': 48,
        # }

        # # –°–æ–∑–¥–∞—ë–º —Å–ø—Ä–∏–Ω—Ç –≤ —Å–∫—Ä–∞–º–µ
        # method = 'tasks.api.scrum.sprint.add'
        # params = {
        #     'fields': {
        #         'groupId': 28,
        #         'name': 'TEST SPRINT',
        #         'dateStart': '2021-11-22T00:00:00+02:00',
        #         'dateEnd': '2021-11-23T00:00:00+02:00',
        #         'status': 'active',
        #         'createdBy': 105,
        #         'sort': 1,
        #     },
        # }

        # # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–ø–∏–∫–æ–≤
        # method = 'tasks.api.scrum.epic.list'
        # params = {
        #     'filter': {
        #         'GROUP_ID': 25,
        #     },
        # }

        # # –°–æ–∑–¥–∞—ë–º —ç–ø–∏–∫
        # method = 'tasks.api.scrum.epic.add'
        # params = {
        #     'fields': {
        #         'groupId': 25,
        #         'name': 'TEST EPIC',
        #         'description': "DESCRIPTION FOR TEST EPIC",
        #         'createdBy': 105,
        #         'color': '#e3f299',
        #     },
        # }

        # # –£–¥–∞–ª—è–µ–º —ç–ø–∏–∫
        # method = 'tasks.api.scrum.epic.delete'
        # params = {
        #     'id': 3,
        # }

        # # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –≤ –±–∏—Ç—Ä–∏–∫—Å–µ
        # method = 'tasks.task.add'
        # params = {
        #     'fields': {
        #                     'PARENT_ID': None, 'TITLE': '–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏',
        #                     'DESCRIPTION': '—Ç–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ', 'MARK': None, 'PRIORITY': 1,
        #                     'STATUS': 3, 'MULTITASK': 'N', 'NOT_VIEWED': 'N',
        #                     'REPLICATE': 'N', 'GROUP_ID': 28, 'STAGE_ID': None,
        #                     'CREATED_BY': 105, 'CREATED_DATE': "2023-03-13T15:53:31+03:00", 'RESPONSIBLE_ID': 105,
        #                     'ACCOMPLICES': None, 'AUDITORS': None, 'CHANGED_BY': 105,
        #                     'CHANGED_DATE': "2023-03-13T15:53:31+03:00", 'STATUS_CHANGED_BY': 105,
        #                     'STATUS_CHANGED_DATE': "2023-03-13T15:53:31+03:00", 'CLOSED_BY': None,
        #                     'CLOSED_DATE': None, 'ACTIVITY_DATE': "2023-03-14T15:42:26+03:00",
        #                     'DATE_START': None, 'DEADLINE': None, 'ALLOW_CHANGE_DEADLINE': None,
        #                     'ALLOW_TIME_TRACKING': None, 'TASK_CONTROL': None, 'ADD_IN_REPORT': None,
        #                     'START_DATE_PLAN': None, 'END_DATE_PLAN': None, 'TIME_ESTIMATE': 0,
        #                     'TIME_SPENT_IN_LOGS': None, 'MATCH_WORK_TIME': 'N',
        #                     # 'FORUM_TOPIC_ID': 0, 'FORUM_ID': 0, 'SITE_ID': 0,
        #                     'SUBORDINATE': 'N', 'FAVORITE': 'N',
        #                     'EXCHANGE_MODIFIED': None, 'EXCHANGE_ID': None,
        #                     'OUTLOOK_VERSION': 8, 'VIEWED_DATE': "2023-03-14T15:42:26+03:00", 'SORTING': None,
        #                     'DURATION_PLAN': 0, 'DURATION_FACT': None, 'DURATION_TYPE': 'days',
        #                     'IS_MUTED': 'N', 'IS_PINNED': 'N', 'IS_PINNED_IN_GROUP': 'N',
        #                     'CHECKLIST': None, 'UF_CRM_TASK': None, 'UF_MAIL_MESSAGE': None,
        #                 }
        # }

        # # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –∫–ª—é—á–µ —Å–∫—Ä–∞–º–∞
        # method = 'tasks.api.scrum.task.update'
        # params = {
        #     'id': 118,
        #     'fields': {
        #         "entityId": 35,
        #         'storyPoints': 18,
        #         'epicId': None,
        #         "sort": 13,
        #     }
        # }

        # # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ë–∏—Ç—Ä–∏–∫—Å–∞
        # method = 'tasks.task.list'
        # params = {
        #     'filter': {
        #         'GROUP_ID': 28,    # –î–ª—è –≥—Ä—É–ø–ø—ã(—Å–∫—Ä–∞–º–∞) —Å –Ω—É–∂–Ω—ã–º ID
        #     },
        #     # 'start': 50,    # –í—ã–≤–æ–¥–∏—Ç—å –∑–∞–¥–∞—á–∏, –Ω–∞—á–∏–Ω–∞—è —Å 50 –∑–∞–ø–∏—Å–∏(—ç—Ç–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö 50)
        # }

        # # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ—É –æ –∑–∞–¥–∞—á–∏ —Å–∫—Ä–∞–º–∞ –ø–æ –µ—ë id == 118
        # method = 'tasks.api.scrum.task.get'
        # params = {
        #     'id': 118,
        # }

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–¥–∞—á–µ
        method = 'task.commentitem.getlist'
        params = {
            'TASKID': 118
        }

        # # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–¥–∞—á–µ
        # method = 'task.commentitem.add'
        # params = {
        #     'TASKID': 118,
        #     'FIELDS': {
        #         'AUTHOR_ID': 105,
        #         'POST_MESSAGE': "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.",
        #         # 'UF_FORUM_MESSAGE_DOC': ['—Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –¥–∏—Å–∫–∞, –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –≤–∏–¥–∞ ["n123", ...]'],
        #     },
        # }

        # method_rslt = bitra_cloud.call(method=method, params=params)
        method_rslt = bitra_box.call(method=method, params=params)
        print('=' * 10, f'–†–ï–ó–£–õ–¨–¢–ê–¢ –ú–ï–¢–û–î–ê {method}', '=' * 10, f'\n\n{method_rslt}')
        return HttpResponse(f'{json.dumps(method_rslt, indent=4, ensure_ascii=False)}', status=http.HTTPStatus.OK)
