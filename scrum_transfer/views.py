import http
import json

from django.core.handlers.wsgi import WSGIRequest
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from loguru import logger
from rest_framework.views import APIView

from scrum_transfer.MyBitrix23 import Bitrix23
from scrum_transfer.models import Settings


@csrf_exempt
def start_bitrix_cloud(request: WSGIRequest):
    """–í—å—é—à–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ë–∏—Ç—Ä–∏–∫—Å (–û–ë–õ–ê–ö–û)"""

    if request.method == 'POST':
        # –†–µ–≥–∞–µ–º —Å–µ–±–µ –¥–∞–Ω–Ω—ã–µ –ë–∏—Ç—Ä—ã
        # –ù–∏–∂–µ –¥–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ë–∏—Ç—Ä—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂—É—Ö–∏, –¥–æ—Å—Ç–∞—ë–º –∏—Ö –∏–∑ –ë–î.
        my_subdomain = Settings.objects.get(key='subdomain_cloud').value
        my_client_id = Settings.objects.get(key='client_id_cloud').value
        my_client_secret = Settings.objects.get(key='client_secret_cloud').value
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º access_token –∏ refresh_token –≤ –ë–î
        Settings.objects.update_or_create(
            key='access_token_cloud',
            defaults={
                'key': 'access_token_cloud',
                'value': request.POST.get("auth[access_token]")
            }
        )
        Settings.objects.update_or_create(
            key='refresh_token_cloud',
            defaults={
                'key': 'refresh_token_cloud',
                'value': request.POST.get("auth[refresh_token]")
            }
        )
        # –°–æ–∑–¥–∞—ë–º –∏–Ω—Å—Ç–∞–Ω—Å –∫–ª–∞—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–ª –≤ MyBitrix23.py
        bitra = Bitrix23(
            hostname=my_subdomain,
            client_id=my_client_id,
            client_secret=my_client_secret,
            access_token=request.POST.get("auth[access_token]"),
            refresh_token=request.POST.get("auth[refresh_token]"),
        )
        logger.info(f'–ù–æ–≤—ã–µ –∞–∫—Å–µ—Å –∏ —Ä–µ—Ñ—Ä–µ—à —Ç–æ–∫–µ–Ω—ã –û–ë–õ–ê–ö–û: {bitra._access_token, bitra._refresh_token}')
        return HttpResponse(f'Success', status=http.HTTPStatus.OK)
    else:
        return HttpResponse(f'–ü—Ä–æ—Å—Ç–∏, –º–æ–π –¥—Ä—É–≥, –Ω–æ {request.method} –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω.ü§∑‚Äç‚ôÇÔ∏è', status=http.HTTPStatus.OK)


@csrf_exempt
def common_bitrix_cloud(request: WSGIRequest):
    """–í—å—é—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ë–∏—Ç—Ä–∏–∫—Å–∞ (–û–ë–õ–ê–ö–û)"""
    return HttpResponse(f'üÜí–í—Å–µ –∫—Ä—É—Ç–æ, üòé–∫–ª–∞—Å—Å–Ω—ã–π {request.method} –∑–∞–ø—Ä–æ—Å!üëåüèø', status=http.HTTPStatus.OK)


@csrf_exempt
def start_bitrix_box(request: WSGIRequest):
    """–í—å—é—à–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ë–∏—Ç—Ä–∏–∫—Å (–ö–û–†–û–ë–ö–ê)"""

    if request.method == 'POST':
        # –†–µ–≥–∞–µ–º —Å–µ–±–µ –¥–∞–Ω–Ω—ã–µ –ë–∏—Ç—Ä—ã
        # –ù–∏–∂–µ –¥–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ë–∏—Ç—Ä—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂—É—Ö–∏, –¥–æ—Å—Ç–∞—ë–º –∏—Ö –∏–∑ –ë–î.
        my_subdomain = Settings.objects.get(key='subdomain_box').value
        my_client_id = Settings.objects.get(key='client_id_box').value
        my_client_secret = Settings.objects.get(key='client_secret_box').value
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º access_token –∏ refresh_token –≤ –ë–î
        Settings.objects.update_or_create(
            key='access_token_box',
            defaults={
                'key': 'access_token_box',
                'value': request.POST.get("auth[access_token]")
            }
        )
        Settings.objects.update_or_create(
            key='refresh_token_box',
            defaults={
                'key': 'refresh_token_box',
                'value': request.POST.get("auth[refresh_token]")
            }
        )
        # –°–æ–∑–¥–∞—ë–º –∏–Ω—Å—Ç–∞–Ω—Å –∫–ª–∞—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏–ª –≤ MyBitrix23.py
        bitra = Bitrix23(
            hostname=my_subdomain,
            client_id=my_client_id,
            client_secret=my_client_secret,
            access_token=request.POST.get("auth[access_token]"),
            refresh_token=request.POST.get("auth[refresh_token]"),
        )
        logger.info(f'–ù–æ–≤—ã–µ –∞–∫—Å–µ—Å –∏ —Ä–µ—Ñ—Ä–µ—à —Ç–æ–∫–µ–Ω—ã –ö–û–†–û–ë–ö–ê: {bitra._access_token, bitra._refresh_token, bitra._base_url_template}')
        return HttpResponse(f'Success', status=http.HTTPStatus.OK)
    else:
        return HttpResponse(f'–ü—Ä–æ—Å—Ç–∏, –º–æ–π –¥—Ä—É–≥, –Ω–æ {request.method} –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω.ü§∑‚Äç‚ôÇÔ∏è', status=http.HTTPStatus.OK)


@csrf_exempt
def common_bitrix_box(request: WSGIRequest):
    """–í—å—é—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ë–∏—Ç—Ä–∏–∫—Å–∞ (–ö–û–†–û–ë–ö–ê)"""
    return HttpResponse(f'üÜí–í—Å–µ –∫—Ä—É—Ç–æ, üòé–∫–ª–∞—Å—Å–Ω—ã–π {request.method} –∑–∞–ø—Ä–æ—Å!üëåüèø', status=http.HTTPStatus.OK)


class TestBtrxActionsView(APIView):
    """
    –¢–µ—Å—Ç –∫–∞–∫–∏—Ö-–ª–∏–±–æ –¥–µ–π—Å—Ç–≤–∏–π —Å –ê–ü–ò –ë–∏—Ç—Ä–∏–∫—Å–∞.
    –ó–¥–µ—Å—å –∫–æ–º–ø–ª–µ–∫—Å –º–µ—Ç–æ–¥–æ–≤ —Å –æ–±–ª–∞–∫–æ–º –∏ –∫–æ—Ä–æ–±–∫–æ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –æ–¥–Ω–æ–π —Ü–µ–ª—å—é.
    """
    def get(self, request, format=None):
        # –°–æ–∑–¥–∞—ë–º –∏–Ω—Å—Ç–∞–Ω—Å –±–∏—Ç—Ä—ã –û–ë–õ–ê–ö–û
        bitra_cloud = Bitrix23(
            hostname=Settings.objects.get(key="subdomain_cloud").value,
            client_id=Settings.objects.get(key="client_id_cloud").value,
            client_secret=Settings.objects.get(key="client_secret_cloud").value,
            access_token=Settings.objects.get(key="access_token_cloud").value,
            refresh_token=Settings.objects.get(key="refresh_token_cloud").value,
        )
        # bitra_cloud.refresh_tokens()

        # –°–æ–∑–¥–∞—ë–º –∏–Ω—Å—Ç–∞–Ω—Å –±–∏—Ç—Ä—ã –ö–û–†–û–ë–ö–ê
        bitra_box = Bitrix23(
            hostname=Settings.objects.get(key="subdomain_box").value,
            client_id=Settings.objects.get(key="client_id_box").value,
            client_secret=Settings.objects.get(key="client_secret_box").value,
            access_token=Settings.objects.get(key="access_token_box").value,
            refresh_token=Settings.objects.get(key="refresh_token_box").value,
        )
        # bitra_box.refresh_tokens()

        '''–ó–∞–±–∏—Ä–∞–µ–º —Å–∫—Ä–∞–º—ã –∏–∑ –æ–±–ª–∞–∫–∞ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤ –∫–æ—Ä–æ–±–∫—É, —Ä–∞–∑–æ—Å–ª–∞–≤ –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —é–∑–µ—Ä–∞–º –≤ –∫–æ—Ä–æ–±–∫–µ'''
        # ID sonet_group –∏–∑ –æ–±–ª–∞–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è —Å–∫—Ä–∞–º–∞–º–∏
        scrum_id_tpl = ('94', '102', '110', '82', '70', '62', '80', '86', '42', '60', '58',
                        '84', '64', '90', '72', '106', '52', '46', '78')
        # –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∞–º—ã –∏–∑ –æ–±–ª–∞–∫–∞
        method = 'sonet_group.get'
        params = {}
        method_rslt = bitra_cloud.call(method=method, params=params)
        counter = 0
        for i_sonet_group in method_rslt.get('result'):
            if i_sonet_group.get('ID') in scrum_id_tpl:
                counter += 1
                logger.info(f'–°–∫—Ä–∞–º ‚Ññ {counter}')

                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã (—Å–∫—Ä–∞–º–∞) –∏–∑ –æ–±–ª–∞–∫–∞
                logger.info(f'–ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã (—Å–∫—Ä–∞–º–∞) –∏–∑ –æ–±–ª–∞–∫–∞')
                method = 'sonet_group.user.get'
                params = {
                    'ID': i_sonet_group.get('ID')  # ID –≥—Ä—É–ø–ø—ã (—Å–∫—Ä–∞–º–∞)
                }
                method_rslt = bitra_cloud.call(method=method, params=params)
                i_scrum_users_lst = method_rslt.get('result')
                i_scrum_users_id_lst = [i_scrum_user.get('USER_ID') for i_scrum_user in i_scrum_users_lst]
                i_scrum_master_id = '28834' if '28834' in i_scrum_users_id_lst else '27662'

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö —Å–∫—Ä–∞–º–∞ –∏–∑ –æ–±–ª–∞–∫–∞ –∏ –Ω–∞—Ö–æ–¥–∏–º –∏—Ö –ø–æ –º—ç–π–ª—É –≤ –∫–æ—Ä–æ–±–∫–µ
                logger.info(f'–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö —Å–∫—Ä–∞–º–∞ –∏–∑ –æ–±–ª–∞–∫–∞ –∏ –Ω–∞—Ö–æ–¥–∏–º –∏—Ö –ø–æ –º—ç–π–ª—É –≤ –∫–æ—Ä–æ–±–∫–µ (—Ü–∏–∫–ª)')
                for j_user_dct in i_scrum_users_lst:
                    logger.info(f"–Æ–∑–µ—Ä c ID –≤ –æ–±–ª–∞–∫–µ {j_user_dct.get('USER_ID')}")
                    method = 'user.get'
                    logger.info('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑. –≤ –æ–±–ª–∞–∫–µ')
                    params = {
                        'ID': j_user_dct.get('USER_ID'),    # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∏—Ç—Ä–µ
                    }
                    method_rslt = bitra_cloud.call(method=method, params=params)    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑. –≤ –æ–±–ª–∞–∫–µ
                    logger.info('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑. –≤ –∫–æ—Ä–æ–±–∫–µ')
                    method = 'user.get'
                    params = {
                        'EMAIL': method_rslt.get('result')[0].get('EMAIL')
                    }
                    method_rslt = bitra_box.call(method=method, params=params)    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑. –≤ –∫–æ—Ä–æ–±–∫–µ
                    j_user_dct['BOX_ID'] = method_rslt.get('result')[0].get('ID')   # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —é–∑–µ—Ä–∞ –∫–æ—Ä–æ–±–∫–∏
                    if j_user_dct.get('USER_ID') == i_scrum_master_id:   # –ï—Å–ª–∏ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π ID - —Å–∫—Ä–∞–º –º–∞—Å—Ç–µ—Ä
                        logger.info(f"–ù–∞–π–¥–µ–Ω —Å–∫—Ä–∞–º-–º–∞—Å—Ç–µ—Ä (ID –æ–±–ª–∞–∫–∞ {j_user_dct.get('USER_ID')}, "
                                    f"ID –∫–æ—Ä–æ–±–∫–∏ {j_user_dct['BOX_ID']})")
                        i_scrum_master_box_id = method_rslt.get('result')[0].get('ID')
                        # –°–æ–∑–¥–∞—ë–º —Å–∫—Ä–∞–º –≤ –∫–æ—Ä–æ–±–∫–µ, –∫–æ–≥–¥–∞ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π —é–∑–µ—Ä —Å–∫—Ä–∞–º-–º–∞—Å—Ç–µ—Ä–∞
                        logger.info(f"–°–æ–∑–¥–∞—ë–º —Å–∫—Ä–∞–º –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º {i_sonet_group.get('NAME')} –≤ –∫–æ—Ä–æ–±–∫–µ")
                        method = 'sonet_group.create'
                        params = {
                            'NAME': i_sonet_group.get('NAME'),
                            'DESCRIPTION': i_sonet_group.get('DESCRIPTION'),
                            'ACTIVE': i_sonet_group.get('ACTIVE'),
                            'VISIBLE': i_sonet_group.get('VISIBLE'),
                            'OPENED': i_sonet_group.get('OPENED'),
                            'CLOSED': i_sonet_group.get('CLOSED'),
                            'SUBJECT_ID': i_sonet_group.get('SUBJECT_ID'),
                            'KEYWORDS': i_sonet_group.get('KEYWORDS'),
                            'SUBJECT_NAME': i_sonet_group.get('SUBJECT_NAME'),
                            'PROJECT': i_sonet_group.get('PROJECT'),
                            'IS_EXTRANET': i_sonet_group.get('IS_EXTRANET'),
                            'INITIATE_PERMS': 'E',  # –í–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ –º–æ–¥–µ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –≤ —Å–∫—Ä–∞–º
                            'SPAM_PERMS': 'K',  # –í—Å–µ —á–ª–µ–Ω—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–æ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–∫—Ä–∞–º
                            'SCRUM_MASTER_ID': i_scrum_master_box_id,   # ID —Å–∫—Ä–∞–º-–º–∞—Å—Ç–µ—Ä–∞
                        }
                        method_rslt = bitra_box.call(method=method, params=params)
                        scrum_box_id = method_rslt.get('result')

                # –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤ —Å–∫—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø—Ä–∞–≤–∞ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—å, –ø–æ—Å–ª–µ –∏—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è)
                logger.info(f"–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤ —Å–∫—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø—Ä–∞–≤–∞ –≤ —Å–∫—Ä–∞–º–µ –Ω–µ –ø—Ä–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è).")
                method = 'sonet_group.user.invite'
                params = {
                    'GROUP_ID': scrum_box_id,
                    'USER_ID': list(map(lambda user_dct: user_dct.get('BOX_ID'), i_scrum_users_lst)),
                    'ROLE': f'–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –í–∞—Å –≤ –ø—Ä–æ–µ–∫—Ç: {i_sonet_group.get("NAME")}'
                }
                method_rslt = bitra_box.call(method=method, params=params)
        return HttpResponse(f'{json.dumps(method_rslt, indent=4, ensure_ascii=False)}', status=http.HTTPStatus.OK)


# TODO: –∑–∞–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª –±–ª–æ–∫ –Ω–∏–∂–µ, –Ω–æ –æ—Å—Ç–∞–≤–ª—è—é –µ–≥–æ —Ç—É—Ç, –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ —é–∑–µ—Ä–æ–≤ –≤ —Å–∫—Ä–∞–º–µ
#                 # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä–∞–º –∫–æ—Ä–æ–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –∏—Ö –ø—Ä–∞–≤–∞–º–∏
#                 scrum_moders_and_owner_lst = list(filter(lambda user_dct: user_dct.get('ROLE') == 'E' or user_dct.get('ROLE') == 'A', i_scrum_users_lst))
#                 scrum_other_users_lst = list(filter(lambda user_dct: user_dct.get('ROLE') == 'K', i_scrum_users_lst))
#                 # –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤ —Å–∫—Ä–∞–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
#                 method = 'sonet_group.user.invite'
#                 params = {
#                     'GROUP_ID': scrum_box_id,
#                     'USER_ID': list(map(lambda user_dct: user_dct.get('BOX_ID'), scrum_moders_and_owner_lst)),
#                     'ROLE': 'E'
#                 }
#                 method_rslt = bitra_box.call(method=method, params=params)
#                 # –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤ —Å–∫—Ä–∞–º –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#                 method = 'sonet_group.user.invite'
#                 params = {
#                     'GROUP_ID': scrum_box_id,
#                     'USER_ID': list(map(lambda user_dct: user_dct.get('BOX_ID'), scrum_other_users_lst)),
#                     'ROLE': 'K'
#                 }
#                 method_rslt = bitra_box.call(method=method, params=params)
#         return HttpResponse(f'{json.dumps(method_rslt, indent=4, ensure_ascii=False)}', status=http.HTTPStatus.OK)


class TestBtrxMethod(APIView):
    """–¢–µ—Å—Ç –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –º–µ—Ç–æ–¥–∞ –±–∏—Ç—Ä–∏–∫—Å–∞"""

    def get(self, request, format=None):
        """–í—å—é—à–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –º–µ—Ç–æ–¥–∞ –ê–ü–ò –ë–∏—Ç—Ä–∏–∫—Å–∞"""

        # –°–æ–∑–¥–∞—ë–º –∏–Ω—Å—Ç–∞–Ω—Å –±–∏—Ç—Ä—ã –û–ë–õ–ê–ö–û
        bitra_cloud = Bitrix23(
            hostname=Settings.objects.get(key="subdomain_cloud").value,
            client_id=Settings.objects.get(key="client_id_cloud").value,
            client_secret=Settings.objects.get(key="client_secret_cloud").value,
            access_token=Settings.objects.get(key="access_token_cloud").value,
            refresh_token=Settings.objects.get(key="refresh_token_cloud").value,
        )
        # bitra_cloud.refresh_tokens()

        # # –°–æ–∑–¥–∞—ë–º –∏–Ω—Å—Ç–∞–Ω—Å –±–∏—Ç—Ä—ã –ö–û–†–û–ë–ö–ê
        # bitra_box = Bitrix23(
        #     hostname=Settings.objects.get(key="subdomain_box").value,
        #     client_id=Settings.objects.get(key="client_id_box").value,
        #     client_secret=Settings.objects.get(key="client_secret_box").value,
        #     access_token=Settings.objects.get(key="access_token_box").value,
        #     refresh_token=Settings.objects.get(key="refresh_token_box").value,
        # )
        # bitra_box.refresh_tokens()

        # # –ó–∞–ø–∏—Å—ã–≤–∞—é –≤ —Å–¥–µ–ª–∫—É ID –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
        # method = 'crm.deal.update'
        # params = {
        #     'id': 86920,  # –£—Å—Ç–∞–Ω–æ–≤–∏–ª —è–≤–Ω–æ, ID —Å–¥–µ–ª–∫–∏
        #     'fields': {
        #         'UF_CRM_1675152964610': [13268, 13274]  # –£—Å—Ç–∞–Ω–æ–≤–∏–ª —è–≤–Ω–æ, ID –º–∞—Ä–∫–µ—Ç–ø–ª–µ—Å–∞(–æ–≤)
        #     },
        # }

        # # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã (—Å–∫—Ä–∞–º—ã —Ç–æ–∂–µ —Å—Ä–µ–¥–∏ –Ω–∏—Ö)
        # method = 'sonet_group.get'
        # params = {}

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã (—Å–∫—Ä–∞–º–∞)
        method = 'sonet_group.user.get'
        params = {
            'ID': 102   # ID –≥—Ä—É–ø–ø—ã (—Å–∫—Ä–∞–º–∞)
        }

        # # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        # method = 'user.get'
        # params = {
        #     # 'ID': 105,    # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∏—Ç—Ä–µ
        #     # 'EMAIL': 'd.shestakov@cfunalog.ru'
        # }

        method_rslt = bitra_cloud.call(method=method, params=params)
        # method_rslt = bitra_box.call(method=method, params=params)
        print('=' * 10, f'–†–ï–ó–£–õ–¨–¢–ê–¢ –ú–ï–¢–û–î–ê {method}', '=' * 10, f'\n\n{method_rslt}')
        return HttpResponse(f'{json.dumps(method_rslt, indent=4, ensure_ascii=False)}', status=http.HTTPStatus.OK)
